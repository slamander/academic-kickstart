mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
set.seed(6)
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=asp)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_combn <- combn(nrow(Pj_sample),2) %>%
t() %>%
as.matrix()
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[i,1],1:2],     # create origin points
Pj_coords[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
crs(se))
passages[[i]] <- passage(tri_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.001)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- stack(passages)                                            # create a raster stack of all the passage probabilities
passages_overlay <- sum(passages)/nrow(Pj_combn)                       # calculate average
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage", na.value = NA) + theme_map() +
theme(legend.position = "right")
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
Pj_combn <- combn(nrow(Pj_sample),2) %>%
t() %>%
as.matrix()
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
scale_fill_continuous(na.value=NA) + theme_map()
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=log(layer))) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
```{r plot flow, fig.height=6, fig.width=9}
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", ,"plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", "plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", "magma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="magma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="viridis", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="inferno", na.value = NA) + theme_map() +
theme(legend.position = "right")
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[i,1],1:2],     # create origin points
Pj_coords[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
crs(se))
passages[[i]] <- passage(tri_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.01)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- stack(passages)                                            # create a raster stack of all the passage probabilities
passages_overlay <- sum(passages)/nrow(Pj_combn)                       # calculate average
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="inferno", na.value = NA) + theme_map() +
theme(legend.position = "right")
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
blogdown::new_post("test", ext=".md")
knit_with_parameters('C:/Users/jbaecher/Dropbox (UFL)/website/content/post/connectivity_script.Rmd', encoding = 'UTF-8')
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(spocc)
library(raster)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
blogdown::new_post("connectivity",ext=".md")
####### Set circuitscape exe file location #######
CS_exe <- 'C:/"Program Files"/Circuitscape/cs_run.exe' # Don't forget the "Program Files" problem
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(spocc)
library(raster)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude) %>%
SpatialPoints(proj4string = crs(se))
library(ggplot2)
library(viridis)
library(ggthemes)
ggplot() + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
Pj_coords <- Pj_sp@coords
Pj_chull <- chull(Pj_sp@coords)                           # Creating convex hull
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(
list(Polygons(
list(Polygon(Pj_chull_ends)), ID=1)),
proj4string = crs(se))       # convert coords to SpatialPolygons
library(rgeos)
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
ggplot() + geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
library(elevatr)
elevation <- get_elev_raster(Pj_poly_buff, z = 8)         # This will find a DEM tile nearest to our polygon
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map() + theme(legend.position = "right")
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
sites <- rasterize(x = Pj_sample, y = asp)
#######  Write rasters #######
writeRaster(sites,"sites_rast.asc", overwrite=TRUE)
plot(sites)
#######  Write rasters #######
writeRaster(sites, "sites_rast.asc")
sites
asp
Pj_sample
asp
elevation
crs(asp) == crs(Pj_sample)
crs(asp)
crs(Pj_sample)
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_coords
Pj_sp
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
Pj_sample
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
crs(asp) == crs(Pj_sample)
crs(Pj_sample)
crs(asp)
crs(asp)
crs(Pj_sample)
asp
blogdown::new_content("content/talk",".md")
set.seed(1234)
##Linear Regression
#Generate the independent variable and the error
x1=rnorm(100,50,9)
x2=rnorm(100,200,64)
error=rnorm(100,0,16)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,50,9)
x2 <- rnorm(100,200,64)
e <- rnorm(100,0,16)
set.seed(1234)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,50,9)
x2 <- rnorm(100,200,64)
e <- rnorm(100,0,16)
b1 <- runif(1, -5, 5)
b2 <- runif(1, -5, 5)
bX <- runif(1, -5, 5)
y_12 <- b1*x1 + b2*x2 + e
y_x <- bx*x1*x2 + e
bx <- runif(1, -5, 5)
y_12 <- b1*x1 + b2*x2 + e
y_x <- bx*x1*x2 + e
plot(y_12 ~ b1)
plot(y_12 ~ x1 + x2)
x1 <- rnorm(100,0,10)
x2 <- rnorm(100,0,15)
e <- rnorm(100,0,10)
b1 <- runif(1, -5, 5)
b2 <- runif(1, -5, 5)
bx <- runif(1, -5, 5)
y_12 <- b1*x1 + b2*x2 + e
y_x <- bx*x1*x2 + e
plot(y_12 ~ x1 + x2)
plot(y_12 ~ x1 + x2)
plot(y_x ~ x1 * x2)
plot(y_x ~ (x1 * x2))
resid_x <- residual(lm(y_x ~ x1*x2))
resid_x <- resid(lm(y_x ~ x1*x2))
resid <- resid(lm(y_x ~ x1*x2))
resid_12 <- resid(lm(y_x ~ x1 + x2))
resid_x <- resid(lm(y_x ~ x1*x2))
resid_12 <- resid(lm(x1 ~ x2))
lm(y_x ~ resid_12) %>%
summary()
library(tidyverse)
set.seed(1234)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,0,10)
x2 <- rnorm(100,0,15)
e <- rnorm(100,0,10)
b1 <- runif(1, -5, 5)
b2 <- runif(1, -5, 5)
y_x <- b1*x1*b2*x2 + e
plot(y_x ~ x1 )
plot(y_x ~ x1)
plot(y_x ~ x2)
y_x <- (b1*x1)*(b2*x2) + e
plot(y_x ~ x1)
plot(y_x ~ x2)
lm(log(y_x) ~ resid_12) %>%
summary()
b1 <- runif(1, 3, 6)
b2 <- runif(1, -2, 8)
y_x <- (b1*x1)*(b2*x2) + e
plot(y_x ~ x1)
plot(y_x ~ x2)
resid_12 <- resid(lm(x1 ~ x2))
lm(y_x ~ resid_12) %>%
summary()
lm(y_x ~ x1 + x2) %>%
summary()
lm(y_x ~ x1 * x2) %>%
summary()
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x1 + x2 + resid_12)
mods[[4]] <- lm(y_x ~ x1 * x2 + resid_12)
library(AICcmodavg)
set.seed(1234)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,0,10)
x2 <- rnorm(100,0,15)
e <- rnorm(100,0,10)
b1 <- runif(1, 3, 6)
b2 <- runif(1, -2, 8)
y_x <- (b1*x1)*(b2*x2) + e
plot(y_x ~ x1)
plot(y_x ~ x2)
resid_12 <- resid(lm(x1 ~ x2))
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x1 + x2 + resid_12)
mods[[4]] <- lm(y_x ~ x1 * x2 + resid_12)
aictab(mods)
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x1 + x2 + resid_12)
mods[[4]] <- lm(y_x ~ x1 * x2 + resid_12)
mods[[5]] <- lm(y_x ~ resid_12)
names <- c(
"multiplicative",
"additive",
"additive + resid",
"multiplicative + resid",
"resid only"
)
aictab(mods, names)
resid_12
plot(y_x ~ resid_12)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,-5,10)
x2 <- rnorm(100,5,15)
e <- rnorm(100,0,10)
b1 <- runif(1, 3, 6)
b2 <- runif(1, -2, 8)
y_x <- (b1*x1)*(b2*x2) + e
plot(y_x ~ x1)
plot(y_x ~ x2)
b1 <- runif(1, 3, 6)
b1 <- runif(1, 3, 6)
y_x <- b1*x1*x2 + e
plot(y_x ~ x1)
plot(y_x ~ x2)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,-5,4)
x2 <- rnorm(100,5,4)
e <- rnorm(100,0,10)
b1 <- runif(1, 3, 6)
y_x <- b1*x1*x2 + e
plot(y_x ~ x1)
plot(y_x ~ x2)
resid_12 <- resid(lm(x1 ~ x2))
plot(y_x ~ resid_12)
plot(y_x ~ x2)
plot(y_x ~ x1)
resid_12 <- resid(lm(x1 ~ x2))
plot(y_x ~ resid_12)
plot(x1 ~ resid_12)
plot(x2 ~ resid_12)
resid_12 <- resid(lm(x1 ~ x2))
plot(y_x ~ resid_12)
plot(x2 ~ resid_12)
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x2 + resid_12)
mods[[4]] <- lm(y_x ~ resid_12)
names <- c(
"multiplicative",
"additive",
"additive + resid",
"multiplicative + resid",
"resid only"
)
aictab(mods, names)
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x2 + resid_12)
mods[[4]] <- lm(y_x ~ resid_12)
names <- c(
"x1 * x2",
"x1 + x2",
"x2 + resid",
"resid only"
)
aictab(mods, names)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,-5,4)
x2 <- rnorm(100,5,4)
e <- rnorm(100,0,10)
b1 <- runif(1, 3, 6)
b2 <- runif(1, 3, 6)
b3 <- runif(1, 3, 6)
y_x <- b1*x1 + b2*x2 + b3*x1*x3 + e
y_x <- b1*x1 + b2*x2 + b3*x1*x2 + e
plot(y_x ~ x1)
plot(y_x ~ x2)
resid_12 <- resid(lm(x1 ~ x2))
plot(y_x ~ resid_12)
plot(x2 ~ resid_12)
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x2 + resid_12)
mods[[4]] <- lm(y_x ~ resid_12)
names <- c(
"x1 * x2",
"x1 + x2",
"x2 + resid",
"resid only"
)
aictab(mods, names)
mods[[1]]
mods[[1]] %>% summary()
test <- mods[[1]] %>% summary()
test$r.squared
lapply(mods, summary)
output <- lapply(mods, summary)
output <- lapply(mods, summary)$
output
output <- lapply(mods, summary)
output
output[[1]]
output[[1]]$r.squared
output$r.squared
aictab(mods, names)
library(AICcmodavg)
set.seed(1234)
##Linear Regression
#Generate the independent variable and the error
x1 <- rnorm(100,-5,4)
x2 <- rnorm(100,5,4)
e <- rnorm(100,0,10)
b1 <- runif(1, 3, 6)
b2 <- runif(1, 3, 6)
b3 <- runif(1, 3, 6)
y_x <- b1*x1 + b2*x2 + b3*x1*x2 + e
plot(y_x ~ x1)
plot(y_x ~ x2)
resid_12 <- resid(lm(x1 ~ x2))
plot(y_x ~ resid_12)
plot(x2 ~ resid_12)
mods <- list()
mods[[1]] <- lm(y_x ~ x1 * x2)
mods[[2]] <- lm(y_x ~ x1 + x2)
mods[[3]] <- lm(y_x ~ x2 + resid_12)
mods[[4]] <- lm(y_x ~ resid_12)
names <- c(
"x1 * x2",
"x1 + x2",
"x2 + resid",
"resid only"
)
aictab(mods, names)
setwd("C:/Users/jbaec/Desktop")
setwd("C:/Users/jbaec/Desktop")
library(tidyverse)
library(rgdal)
library(rgeos)
library(sp)
road_data <- readOGR("road_data/aadt.shp")
traffic_data <- road_data
plot(traffic_data)
traffic_data$AADT
