goal=locations[2], theta = 0.01)
print(paste((j/nrow(Pj_combn))*100, "% complete"))
if(length(passages) == nrow(Pj_combn)){
passages_layer <- stack(passages)
passage_layers[[paste(layers[i])]] <- sum(passages_layer)/nrow(Pj_combn)
}
}
}
}
passage_layers
1:nlayers(vars$elv)
vars_tr
length(vars_tr) == nlayers(vars)
vars_tr <- list()
passages <- list()
passage_layers <- list()
for(i in 1:nlayers(vars$elv)){
vars_tr[[paste(layers[i])]] <- transition(vars[[i]], transitionFunction = mean, 4) %>%
geoCorrection(type="c",multpl=F)
if(length(vars_tr) == nlayers(vars$elv)){
print("Completed transition layers")
for (j in 1:nrow(Pj_combn)){
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[j,1],1:2],
Pj_coords[Pj_combn[j,2],1:2]),
crs(Pj_asp))
passages[[j]] <- passage(vars_tr[[i]],
origin=locations[1],
goal=locations[2], theta = 0.01)
print(paste((j/nrow(Pj_combn))*100, "% complete"))
if(length(passages) == nrow(Pj_combn)){
passages_layer <- stack(passages)
passage_layers[[paste(layers[i])]] <- sum(passages_layer)/nrow(Pj_combn)
}
}
}
}
passage_layers
length(passages) == nrow(Pj_combn)
vars_tr <- list()
passages <- list()
passage_layers <- list()
for(i in 1:nlayers(vars)){
vars_tr[[paste(layers[i])]] <- transition(vars[[i]], transitionFunction = mean, 4) %>%
geoCorrection(type="c",multpl=F)
if(length(vars_tr) == nlayers(vars)){
print("Completed transition layers")
for (j in 1:nrow(Pj_combn)){
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[j,1],1:2],
Pj_coords[Pj_combn[j,2],1:2]),
crs(Pj_asp))
passages[[j]] <- passage(vars_tr[[i]],
origin=locations[1],
goal=locations[2], theta = 0.01)
if(length(passages) == nrow(Pj_combn)){
passages_layer <- stack(passages)
passage_layers[[paste(layers[i])]] <- sum(passages_layer)/nrow(Pj_combn)
} else{
print(paste((j/nrow(Pj_combn))*100, "% complete"))
}
}
}
}
plot(states); points(Pj_sp
TN_NC <- states %>%
TNNC <- states %>%
subset(NAMES %>% c("Tennessee", "North Carolina"))
TNNC <- states %>%
subset(NAME %>% c("Tennessee", "North Carolina"))
TNNC <- states %>%
dplyr::subset(NAME %>% c("Tennessee", "North Carolina"))
TNNC <- states %>%
subset(NAME %in% c("Tennessee", "North Carolina"))
TN_NC <- states %>%
subset(NAME %in% c("Tennessee", "North Carolina"))
plot(TN_NC)
crs(TN_NC
)
plot(TN_NC); points(Pj_sp)
plot(Pj_sp); lines(TN_NC)
TN_NC <- states %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude) %>%
SpatialPoints(proj4string = crs(states))
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude) %>%
SpatialPoints(proj4string = crs(states))
ggplot(as.data.frame(vars$asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
as.data.frame(vars$asp, xy=T)
ggplot(as.data.frame(vars$asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=asp)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(TN_NC) + geom_line(aes(x=longitude, y=latitude))
ggplot(TN_NC) + geom_line(aes(x=lon, y=lat))
ggplot(TN_NC) + geom_line(aes(x=x, y=y))
ggplot(TN_NC) + geom_polygon(aes(x=x, y=y))
ggplot(TN_NC) + geom_polygon(aes(x=longitude, y=latitude))
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat))
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat, fill="grey80"))
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat, fill="grey80")) + coord_quickmap()
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat, fill="grey80")) + coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat, fill=NAME)) +
scale_fill_ coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat, fill=NAME)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(aes(x=long, y=lat), fill="grey80") +
coord_quickmap() + theme_map()
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=states, aes(x=lon, y=lat), fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=states, aes(x=long, y=lat), fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=states, aes(x=long, y=lat, group=group), fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
states %>%
filter(!NAME %in% c("Alaska"))
states$GEOID
states$REGION
plot(states, col=states$REGION)
states$REGION
se <- states %>%
subset(REGION == "1")
states %>%
subset(REGION == "1") %>%
plot()
states %>%
subset(REGION == "2") %>%
plot()
states %>%
subset(REGION == "3") %>%
plot()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat), fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), border="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
library(ggplot2)
library(viridis)
library(ggthemes)
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggsave("se.png", width = 4, height = 3, units = "in", dpi = 200)
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
Pj_sp@coords
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=Pj_sp@coords, aes(x=latitude, y=longitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=latitude, y=longitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=latitude, y=longitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=latitude, y=longitude))
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
#geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) +   geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
ggplot(TN_NC) +   geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude)) +
coord_quickmap() + theme_map()
ggplot(TN_NC) +   geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
ggplot() + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
ggplot() + geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
?terrain
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
set.seed(6)
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
set.seed(6)
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=asp)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_combn <- combn(nrow(Pj_sample),2) %>%
t() %>%
as.matrix()
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[i,1],1:2],     # create origin points
Pj_coords[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
crs(se))
passages[[i]] <- passage(tri_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.001)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- stack(passages)                                            # create a raster stack of all the passage probabilities
passages_overlay <- sum(passages)/nrow(Pj_combn)                       # calculate average
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage", na.value = NA) + theme_map() +
theme(legend.position = "right")
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
Pj_combn <- combn(nrow(Pj_sample),2) %>%
t() %>%
as.matrix()
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
scale_fill_continuous(na.value=NA) + theme_map()
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
tri <- terrain(elv, opt="TRI", neighbors = 8)             # Calculate TRI
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(tri, xy=T)) + geom_raster(aes(x=x, y=y, fill=tri)) +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=log(layer))) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
```{r plot flow, fig.height=6, fig.width=9}
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", ,"plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", "plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", "magma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="magma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="viridis", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="plasma", na.value = NA) + theme_map() +
theme(legend.position = "right")
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="inferno", na.value = NA) + theme_map() +
theme(legend.position = "right")
passages <- list()                                                     # Create a list to store the passage probability rasters in
system.time(                                                           # Keep track of how long this takes
for (i in 1:nrow(Pj_combn)) {
locations <- SpatialPoints(rbind(Pj_coords[Pj_combn[i,1],1:2],     # create origin points
Pj_coords[Pj_combn[i,2],1:2]),   # create destination (or goal) points, to traverse
crs(se))
passages[[i]] <- passage(tri_tr,                                   # run the passage function
origin=locations[1],                 # set orgin point
goal=locations[2],                   # set goal point
theta = 0.01)                             # set theta (tuning parameter, see notes below)
print(paste((i/nrow(Pj_combn))*100, "% complete"))
}
)
passages <- stack(passages)                                            # create a raster stack of all the passage probabilities
passages_overlay <- sum(passages)/nrow(Pj_combn)                       # calculate average
ggplot(as.data.frame(passages_overlay, xy=T)) + geom_raster(aes(x=x,y=y,fill=layer)) +
scale_fill_viridis("Probability of Passage (Flow)", option="inferno", na.value = NA) + theme_map() +
theme(legend.position = "right")
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
blogdown::new_post("test", ext=".md")
knit_with_parameters('C:/Users/jbaecher/Dropbox (UFL)/website/content/post/connectivity_script.Rmd', encoding = 'UTF-8')
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(spocc)
library(raster)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
blogdown::new_post("connectivity",ext=".md")
####### Set circuitscape exe file location #######
CS_exe <- 'C:/"Program Files"/Circuitscape/cs_run.exe' # Don't forget the "Program Files" problem
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(tigris)         # Tigris package for USA census data
library(tidyverse)
states <- states()
se <- states %>%
subset(REGION == "3")
TN_NC <- se %>%     # Subsetting the data to Tennessee and North Carolina
subset(NAME %in% c("Tennessee", "North Carolina"))
library(spocc)
library(raster)
Pj <- occ(query = "Plethodon jordani",                 # JRCS scientific name
from = "gbif",                               # limiting query to *the first* 1000 records
limit=1000,                                  # limiting query to *the first* 1000 records
has_coords = T)                              # limiting those 1000 records to those that have geo-referenced data
Pj_sp <- Pj$gbif$data$Plethodon_jordani %>%            # Grabbing the Darwin-core data from the spocc object
dplyr::select(longitude,                             # Keep locations and year, discard the rest
latitude,
year) %>%
dplyr::filter(year > 2000) %>%                       # Filter records to only those after year 2000
filter(!duplicated(round(longitude, 2),              # Remove duplicate records using rounded decimals (this removes points very near to one-another)
round(latitude, 2)) == TRUE) %>%  # >> See notes below about ^^
dplyr::mutate(lon = scale(longitude),                # Remove points far outside the cluster of occurrences
lat = scale(latitude)) %>%             # >> See notes below about ^^
dplyr::filter(!abs(lon)>2) %>%
dplyr::filter(!abs(lat)>2) %>%
dplyr::select(longitude,
latitude) %>%
SpatialPoints(proj4string = crs(se))
library(ggplot2)
library(viridis)
library(ggthemes)
ggplot() + geom_polygon(data=se, aes(x=long, y=lat, grou=group), col="grey40", fill="grey80") +
geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
coord_quickmap() + theme_map()
Pj_coords <- Pj_sp@coords
Pj_chull <- chull(Pj_sp@coords)                           # Creating convex hull
Pj_chull_ends <- Pj_sp@coords[c(Pj_chull, Pj_chull[1]),]  # generate the end points of polygon.
Pj_poly <- SpatialPolygons(
list(Polygons(
list(Polygon(Pj_chull_ends)), ID=1)),
proj4string = crs(se))       # convert coords to SpatialPolygons
library(rgeos)
Pj_poly_buff <- gBuffer(Pj_poly, width = 0.05, byid=T)
ggplot() + geom_polygon(data=TN_NC, aes(x=long, y=lat), col="grey40", fill="light blue") +
geom_polygon(data=Pj_poly_buff, aes(x=long, y=lat, grou=group), col="grey40", fill="pink") +
geom_point(data=as.data.frame(Pj_sp@coords), aes(x=longitude, y=latitude), size=0.01) +
coord_quickmap() + theme_map()
library(elevatr)
elevation <- get_elev_raster(Pj_poly_buff, z = 8)         # This will find a DEM tile nearest to our polygon
elv <- elevation %>%                                      # First, lets cut the DEM to our study area
crop(Pj_poly_buff) %>%                                  # crop to the extent
mask(Pj_poly_buff)                                      # mask to the edges
asp <- terrain(elv, opt="aspect", neighbors = 8)          # Calculate aspect
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
scale_fill_continuous(na.value=NA) + theme_map() + theme(legend.position = "right")
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
sites <- rasterize(x = Pj_sample, y = asp)
#######  Write rasters #######
writeRaster(sites,"sites_rast.asc", overwrite=TRUE)
plot(sites)
#######  Write rasters #######
writeRaster(sites, "sites_rast.asc")
sites
asp
Pj_sample
asp
elevation
crs(asp) == crs(Pj_sample)
crs(asp)
crs(Pj_sample)
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),]       # Take 5 random locations
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
Pj_coords
Pj_sp
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
Pj_sample
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
set.seed(6)                                               # To make your results match mine
Pj_sample <- Pj_coords[sample(nrow(Pj_coords), 5),] %>%   # Take 5 random locations
SpatialPoints(crs(se))
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
ggplot(as.data.frame(asp, xy=T)) + geom_raster(aes(x=x, y=y, fill=aspect)) +
geom_point(data=as.data.frame(Pj_sample), aes(x=longitude, y=latitude), size=2, col="white") +
scale_fill_continuous(na.value=NA) + theme_map()
crs(asp) == crs(Pj_sample)
crs(Pj_sample)
crs(asp)
crs(asp)
crs(Pj_sample)
asp
blogdown::new_content("content/talk",".md")
